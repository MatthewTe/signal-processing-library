# Importing Audio libraries:
from pyAudioAnalysis import audioBasicIO as aIO
from pyAudioAnalysis import ShortTermFeatures as aF
import librosa

# Importing external packages:
import numpy as np
import pandas as pd
import math
from scipy.fft import fft, ifft
import random 
import matplotlib.pyplot as plt

class AudioSignal(object):
	"""This is an object oriented wrapper for signal data extracted via librosa.

	This class is meant to serve as a wrapper that contains all of the signal
	data and signal features that are used in dynamic signal processing. These
	features are used in various signal processing techniques such as audio
	classification and feature visualization. 

	Attributes:
		audio_path (str): The path string to the audio file to be ingested as a 
			signal.

		st_window_size (float): The size of the signal window that is used to split
			the signal timeseries for short-term feature extraction. Default is 50 m/s.

		st_window_stp (float): The step for each signal window that is used in 
			short-term feature extraction. Default is 50 m/s. No overlap between windows/

		n_fft (int): The size of each FFT window from the amplitude signal used in 
			calculating the Short Term Fourier Transform.
			
		hop_length (int): The number of audio frames between STFT columns used in 
			calculating the Short Term Fourier Transform.
		
		num_mfcc (int): An integer indicating the number of frequency
			cepstral coefficients to be generated by the librosa mfcc()
			method used in calculating the Mel Frequency Cepstral Coefficients.
	 
	Todo:
		* Write __repr__ method for a signal.
	"""
	def __init__(self, audio_path, st_window_size=0.050, st_window_stp=0.050, n_fft=2048, hop_length=512, num_mfcc=13):
		
		# Declaring Instance parameters:
		self.amplitude_timeseries, self.sampling_rate = librosa.load(audio_path)
		self.signal_duration = len(self.amplitude_timeseries / float(self.sampling_rate))
		# Declaring the FFT window size and STFT audio frame length as instance params:
		self.n_fft, self.hop_length, self.num_mfcc = n_fft, hop_length, num_mfcc

		# Cleaing the audio signal of leading and trailing scilence:
		self.cleaned_amplitude, _ = librosa.effects.trim(self.amplitude_timeseries)
		self.cleaned_signal_duration = len(self.cleaned_amplitude) / float(self.sampling_rate)
		
		self.st_window_size = st_window_size # Defaults are 50 m/s.
		self.st_window_stp = st_window_stp

		# Performing the feature extraction to the signal based via internal methods:
		self._perform_short_term_feature_extraction()
		self._calculate_short_term_fourier_transform(self.n_fft, self.hop_length)
		self._calculate_spectogram()
		self._calculate_mel_frequency_cepstral_coeffs(self.num_mfcc)

	def _perform_short_term_feature_extraction(self):
		"""Method that performs all short term feature extraction of 
		the signal via the feature_extraction() method from the pyAudioAnalysis
		library. 

		The feature_extraction() method generates a matrix of short-term features
		for each signal window and an associated list of feature names.
		
		"""
		# Calling pyAudioAnalysis to compute short term features:
		self.short_term_feature_matrix, self.short_term_feature_names = aF.feature_extraction(
			self.cleaned_amplitude, 
			self.sampling_rate,
			int(self.sampling_rate * self.st_window_size),
			int(self.sampling_rate * self.st_window_stp))

	def _calculate_short_term_fourier_transform(self, n_fft, hop_length):
		"""Method uses the librosa library stft method to extract the Short Term
		Fourier Transform from the amplitude timeseries.
		
		Attributes:
			n_fft (int): The size of each FFT window from the amplitude signal.
			
			hop_length (int): The number of audio frames between STFT columns. 
		
		"""
		# Performing the librosa Short Term Fourier Transform calculations:
		self.stft_magnitude = np.abs(librosa.stft(
			self.cleaned_amplitude,
			n_fft=self.n_fft,
			hop_length=self.hop_length))

		self.stft_frequency = np.linspace(0, self.sampling_rate, 
			len(self.stft_magnitude))

	def _calculate_spectogram(self):
		"""The method that performs data transformations of STFT data generated
		from the self._calculate_short_term_fourier_transform() methods. The 
		data transformations applied on spectogram data are:

		* STFT amplitude spectogram --> Decible Scaled Spectogram
		* A Mel Spectogram 
		* A Mel Spectogram --> Mel Decible Scaled Spectogram
		
		"""
		# Converting the STFT magnitude (amplitude spectogram) to Decibel scale:
		self.stft_Db_specdata = librosa.amplitude_to_db(
			self.stft_magnitude, ref=np.max)

		# Calculating the Mel Spectograms:
		self.mel_specdata = librosa.feature.melspectrogram(
			self.cleaned_amplitude, sr=self.sampling_rate)

		# Converting the Mel Spectogram dat to a decible scale: 
		self.mel_Db_specdata = librosa.amplitude_to_db(
			self.mel_specdata, ref=self.sampling_rate)

	def _calculate_mel_frequency_cepstral_coeffs(self, num_mfcc):
		"""The method makes use of the librosa library to compute the 
		Mel Frequency Cepstral Coefficients (MFCCs) for the amplitude
		timeseries.

		Attributes:
			num_mfcc (int): An integer indicating the number of frequency
				cepstral coefficients to be generated by the librosa mfcc()
				method.

		"""
		# Creating instance parameters:
		self.num_mfcc = num_mfcc

		# Calculating the MFCC from the cleaned amplitude timeseries:
		self.mfccs = librosa.feature.mfcc(
			self.cleaned_amplitude, 
			n_fft= self.n_fft,
			hop_length= self.hop_length,
			n_mfcc=num_mfcc)